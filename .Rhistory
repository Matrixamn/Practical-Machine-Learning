fp<-paste("specdata/00",as.character(i),".csv",sep="")
}
else if(i<100) {
fp<-paste("specdata/0",as.character(i),".csv",sep="")
}
else {
fp<-paste("specdata/",as.character(i),".csv",sep="")
}
data <- read.csv(fp, header=T)
data<-data[complete.cases(data),]
return(c(i,nrow(data)))
}
results<-sapply(id,doshit)
df<-as.data.frame(t(results))
names(df)[1] <- "id"
names(df)[2] <- "nobs"
}
complete("C://Users//nicolas//Desktop//Coursera//Computing for Data Analysis//Week 2//Programming//specdata//")
complete <- function(directory, id = 1:332) {
ids<-vector()
numcomplete<-vector()
doshit<-function(i) {
if(i<10) {
fp<-paste("specdata00",as.character(i),".csv",sep="")
}
else if(i<100) {
fp<-paste("specdata0",as.character(i),".csv",sep="")
}
else {
fp<-paste("specdata",as.character(i),".csv",sep="")
}
data <- read.csv(fp, header=T)
data<-data[complete.cases(data),]
return(c(i,nrow(data)))
}
results<-sapply(id,doshit)
df<-as.data.frame(t(results))
names(df)[1] <- "id"
names(df)[2] <- "nobs"
}
complete("C://Users//nicolas//Desktop//Coursera//Computing for Data Analysis//Week 2//Programming//specdata//")
complete <- function(directory, id = 1:332) {
ids<-vector()
numcomplete<-vector()
doshit<-function(i) {
if(i<10) {
fp<-paste("specdata//00",as.character(i),".csv",sep="")
}
else if(i<100) {
fp<-paste("specdata//0",as.character(i),".csv",sep="")
}
else {
fp<-paste("specdata//",as.character(i),".csv",sep="")
}
data <- read.csv(fp, header=T)
data<-data[complete.cases(data),]
return(c(i,nrow(data)))
}
results<-sapply(id,doshit)
df<-as.data.frame(t(results))
names(df)[1] <- "id"
names(df)[2] <- "nobs"
}
complete("C://Users//nicolas//Desktop//Coursera//Computing for Data Analysis//Week 2//Programming//specdata//")
complete <- function(directory, id = 1:332) {
ids<-vector()
numcomplete<-vector()
doshit<-function(i) {
if(i<10) {
fp<-paste("00",as.character(i),".csv",sep="")
}
else if(i<100) {
fp<-paste("0",as.character(i),".csv",sep="")
}
else {
fp<-paste("",as.character(i),".csv",sep="")
}
data <- read.csv(fp, header=T)
data<-data[complete.cases(data),]
return(c(i,nrow(data)))
}
results<-sapply(id,doshit)
df<-as.data.frame(t(results))
names(df)[1] <- "id"
names(df)[2] <- "nobs"
}
complete("C://Users//nicolas//Desktop//Coursera//Computing for Data Analysis//Week 2//Programming//specdata//")
directory
data<- file.choose()
data<- file.choose()
data
complete("C:\\Users\\nicolas\\Desktop\\Coursera\\Computing for Data Analysis\\Week 2\\Programming\\specdata\\")
data <- read.csv (C:\\Users\\nicolas\\Desktop\\Coursera\\Computing for Data Analysis\\Week 2\\Programming\\specdata\\001.csv)
data <- read.csv ("C:\\Users\\nicolas\\Desktop\\Coursera\\Computing for Data Analysis\\Week 2\\Programming\\specdata\\001.csv")
data
complete("C:\\Users\\nicolas\\Desktop\\Coursera\\Computing for Data Analysis\\Week 2\\Programming\\specdata\\")
library(caret)
install.packages('AppliedPredictiveModeling')
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages('caret')
data(AlzheimerDisease)
install.packages(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
install.packages('AppliedPredictiveModelng')
install.packages('AppliedPredictiveModeling')
install.packages('AppliedPredictiveModeling')
install.packages('ApliedPredictiveModeling')
library(appliedPredictiveModeling)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('caret')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
AlzheimerDisease
names()
data(AlzheimerDisease)
data
head((AlzheimerDisease))
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData
names(adData)
predictors
names(predictors)
diagnosis
names(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
mixure
mixtures
names(mixtures)
mixtures$CompressiveStrength
install.packages('Mmsci)
)
install.packages('Mmsci')
install.packages('Hmisc')
library(Hmisc)
library(Hmisc); library(gridExtra)
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
cutCompressiveStrength <- cut2(training$CompressiveStrength,g=4)
ggplot(data = training, aes(y = index, x = cutCompressiveStrength)) + geom_boxplot() + geom_jitter(col="red")
featurePlot(x = training[, names], y = cutCompressiveStrength, plot = "box")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram()
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
names <- colnames(training)
names <- names[grep("^IL",names)]
preProcess(training[,names],method="pca", thresh=0.9)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(Hmisc)
names <- colnames(training)
names <- names[grep("^IL",names)]
train<-training[,names]
test<-testing[,names]
preProc<-preProcess(train,method="pca", thresh=0.8)
g1<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g1, test))
g2<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g2, test))
To train the first glm I just run
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
to train the second glm I run
g2 <- train(training$diagnosis~., data=psubTrain, method="glm")
finally to evaluate the accuracy
# for first model
mean(testing$diagnosis == predict(g1, subTest))
# for second model
mean(testing$diagnosis == predict(g2, psubTest))
g1<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g1, test))
g1<-train(training$diagnosis ~ ., method="glm", data=train)
install('e1071')
install.packages('e1071')
library('e1071')
library(Hmisc)
names <- colnames(training)
names <- names[grep("^IL",names)]
train<-training[,names]
test<-testing[,names]
preProc<-preProcess(train,method="pca", thresh=0.8)
g1<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g1, test))
g2<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g2, test))
To train the first glm I just run
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
to train the second glm I run
g2 <- train(training$diagnosis~., data=psubTrain, method="glm")
finally to evaluate the accuracy
# for first model
mean(testing$diagnosis == predict(g1, subTest))
# for second model
mean(testing$diagnosis == predict(g2, psubTest))
g1<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g1, test))
g2<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g2, test))
To train the first glm I just run
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
to train the second glm I run
g2 <- train(training$diagnosis~., data=psubTrain, method="glm")
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
subtrain
subTrain
library(Hmisc)
names <- colnames(training)
names
mean(testing$diagnosis == predict(g1, subTest))
# for second model
mean(testing$diagnosis == predict(g2, psubTest))
mean(mixtures$CompressiveStrength)
sd(mixtures$CompressiveStrength)
mean(mixtures$SuperPlasticizer)
Superplasticizer
names(mixtures)
mean(mixture$Superplasticizer)
mean(mixtures$Superplasticizer)
sd(mixtures$Superplasticizer)
mixtures$Superplasticizer
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram()
mean(training)
mean(training$Superplasticizer)
sd(training$Superplasticizer)
t1 <- training$Superplasticizer
t1s <- (t1 - mean(t1)/sd(t1))
mean(t1s)
sd(t1s)
table(mixtures$Superplasticizer)
table(mixtures$Superplasticizer>0)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
names <- colnames(training)
names <- names[grep("^IL",names)]
preProcess(training[,names],method="pca", thresh=0.9)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(Hmisc)
names <- colnames(training)
names <- names[grep("^IL",names)]
train<-training[,names]
test<-testing[,names]
preProc<-preProcess(train,method="pca", thresh=0.8)
g1<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g1, test))
g2<-train(training$diagnosis ~ ., method="glm", data=train)
mean(testing$diagnosis == predict(g2, test))
g1 <- train(training$diagnosis~., data=subTrain, method="glm")
quit()
downloadDataset <- function(URL="", destFile="data.csv"){
if(!file.exists(destFile)){
download.file(URL, destFile, method="curl")
}else{
message("Dataset already downloaded.")
}
}
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
downloadDataset(trainURL, "pml-training.csv")
downloadDataset(testURL, "pml-testing.csv")
library(knitr)
opts_chunk$set(cache=TRUE,echo=TRUE)
options(width=120)
library(caret)
library(randomForest)
library(pander)
library(caret)
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
downloadDataset(trainURL, "pml-training.csv")
downloadDataset(testURL, "pml-testing.csv")
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
testing <-read.csv("pml-testing.csv",na.strings=c("NA",""))
downloadDataset <- function(URL="", destFile="data.csv"){
if(!file.exists(destFile)){
download.file(URL, destFile, method="url")
}else{
message("Dataset already downloaded.")
}
}
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
downloadDataset(trainURL, "pml-training.csv")
downloadDataset(testURL, "pml-testing.csv")
trainURL <- read.url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
trainURL <- url.read("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
trainURL <- url.open("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
trainURL <- open.url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
a<- 5
a
library(knit)
install.packages('knit')
library(knit)
a<-5
```{r simulate_data}
x <- rnorm(100)
y <- 2*x + rnorm(100)
```
install.packages("knitr")
library(knitr)
```{r simulate_data}
x <- rnorm(100)
y <- 2*x + rnorm(100)
```
y <- 2*x + rnorm(100)
```
```{r simulate_data}
x <- rnorm(100)
y <- 2*x + rnorm(100)
```
```{r fig.width=7, fig.height=6}
plot(cars)
```
```{r}
summary(cars)
plot(cars)
summary(cars)
library(knitr)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
```{r fig.width=7, fig.height=6}
plot(cars)
```
downloadFiles<-function(
dataURL="", destF="t.csv"
){
if(!file.exists(destF)){
download.file(dataURL, destF, method="curl")
}else{
message("data already downloaded.")
}
}
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
downloadFiles(trainURL, "pml-training.csv")
datos <- url (https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv)
datos <- url ("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
datos
datos <- url ("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
downloadFiles(datos,"fm")
URL      <- "http://rfunction.com/code/1202/120222.R"
destfile <- "downloaded/120222.R"
download.file(URL, destfile)
data <- open("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
data <- open.url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",datos.cvs)
wdir()
wd()
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",C.\datos.cvs)
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",C.//datos.cvs)
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",C://datos.cvs)
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",C:\\datos.cvs)
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",C:\datos.cvs)
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",C:/datos.cvs)
pml.training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
pml.training <- read.csv("C:\Users\nicolas\Desktop\Practical Machine Learning\Data\pml-training.csv", na.strings = c("NA", ""))
x <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
head(x)
x <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
head(x)
datos<- https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
datos<- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
x <. read.csv (url(datos))
x <- read.csv (url(datos))
head(x)
close(datos)
x <- read.csv (url(datos),na.strings = c("NA", ""))
head(x)
x <- read.csv (url(datos),na.strings = c("NA", ""))
y <- read.csv (url(datos))
table(count(x,y))
count(x)
dim(x)
dim(y)
head(x)
head(y)
pml_training <- read.csv(url(datatraining,na.strings = c("NA", "")))
pml_test <- read.csv(url(datatest,na.strings = c("NA", "")))
pml_test <- read.csv(url(datatest,na.strings = c("NA", "")))
x <- read.csv (url(datos),na.strings = c("NA", ""))
datatraining<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
pml_test <- read.csv(url(datatest),na.strings = c("NA", ""))
datatest <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
pml_test <- read.csv(url(datatest),na.strings = c("NA", ""))
datatest <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
pml_test <- read.csv(url(datatest),na.strings = c("NA", ""))
pml_test
datatest <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
pml_test <- read.csv(url(datatest),na.strings = c("NA", ""))
head(pml_test)
datatest <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
pml_test <- read.csv(url(datatest),na.strings = c("NA", ""))
pml.training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
pml.training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
library(caret)
## Loading required package: lattice
## Loading required package: ggplot2
# load the training set
pml.training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
# load the testing set Note: the testing set is not used in this analysis
# the set is only used for the second part of the assignment when the model
# is used to predict the classes
pml.testing <- read.csv("pml-testing.csv", na.strings = c("NA", ""))
# summary(pml.training)
setwd("C:/Users/nicolas/Desktop/Practical Machine Learning/Project")
library(caret)
## Loading required package: lattice
## Loading required package: ggplot2
# load the training set
pml.training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
# load the testing set Note: the testing set is not used in this analysis
# the set is only used for the second part of the assignment when the model
# is used to predict the classes
pml.testing <- read.csv("pml-testing.csv", na.strings = c("NA", ""))
# summary(pml.training)
rIndex <- grep("X|user_name|cvtd_timestamp", names(pml.training))
pml.training <- pml.training[, -rIndex]
nzv <- nearZeroVar(pml.training)
pml.training <- pml.training[, -nzv]
NAs <- apply(pml.training, 2, function(x) {
sum(is.na(x))
})
pml.training <- pml.training[, which(NAs == 0)]
tIndex <- createDataPartition(y = pml.training$classe, p = 0.2, list = FALSE)
pml.sub.training <- pml.training[tIndex, ]  # 3927 obs. of 56 variables
pml.test.training <- pml.training[-tIndex, ]  # test set for cross validation
modFit <- train(pml.sub.training$classe ~ ., data = pml.sub.training, method = "rpart")
## Loading required package: rpart
modFit
results <- modFit$results
round(max(results$Accuracy), 4) * 100
ctrl <- trainControl(method = "cv", number = 4, allowParallel = TRUE)
modFit <- train(pml.sub.training$classe ~ ., data = pml.sub.training, method = "rf",
prof = TRUE, trControl = ctrl)
modFit
results <- modFit$results
round(max(results$Accuracy), 4) * 100
pred <- predict(modFit, pml.test.training)
pml.test.training$predRight <- pred == pml.test.training$classe
table(pred, pml.test.training$classe
)
pRes <- postResample(pred, pml.test.training$classe)
pRes
